{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"faq/","text":"Frequently Asked Questions Why did you create this awesome program Codie asked me to, very nicely. Plus, I wanted to learn something new and was delighted about how easy the GraphQL language really is (not!). Why should I change my status Cause it is better than whatever is on your profile now Do I need an API key? Yes, you will need a GithubAPI access token. Easily created here .","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#why-did-you-create-this-awesome-program","text":"Codie asked me to, very nicely. Plus, I wanted to learn something new and was delighted about how easy the GraphQL language really is (not!).","title":"Why did you create this awesome program"},{"location":"faq/#why-should-i-change-my-status","text":"Cause it is better than whatever is on your profile now","title":"Why should I change my status"},{"location":"faq/#do-i-need-an-api-key","text":"Yes, you will need a GithubAPI access token. Easily created here .","title":"Do I need an API key?"},{"location":"quick_start/","text":"Quick Start In order to install the library, simply run: python -m pip install professional_python_exercises_2_githubcli Now you can count the stars, get user details and set your status to something delicous. For easy commands use the task file together with TaskFile task: Available tasks for this project: * build: Builds the puthon package * getdetails: Get details of a given user and print it to console * getdetailsjson: Get details of a given user in json * install: Installs the dependecies based on the poetry file * lint: Runs formatting and linting * stars: Get the number of stars of the given user's repositories * starsjson: Get the number of stars of the given user's repositories in json format * status: Set the status of your user to something delicous * test: Runs tests on the code","title":"Quick-Start"},{"location":"quick_start/#quick-start","text":"In order to install the library, simply run: python -m pip install professional_python_exercises_2_githubcli Now you can count the stars, get user details and set your status to something delicous. For easy commands use the task file together with TaskFile task: Available tasks for this project: * build: Builds the puthon package * getdetails: Get details of a given user and print it to console * getdetailsjson: Get details of a given user in json * install: Installs the dependecies based on the poetry file * lint: Runs formatting and linting * stars: Get the number of stars of the given user's repositories * starsjson: Get the number of stars of the given user's repositories in json format * status: Set the status of your user to something delicous * test: Runs tests on the code","title":"Quick Start"},{"location":"sbom/","text":"3rd Party Licenses Name Version License(s) Type URL astroid 2.12.12 unknown library attrs 22.1.0 unknown library https://pypi.org/project/attrs/22.1.0 black 22.10.0 unknown library https://pypi.org/project/black/22.10.0 certifi 2022.9.24 unknown library https://pypi.org/project/certifi/2022.9.24 cffi 1.15.1 unknown library https://pypi.org/project/cffi/1.15.1 charset-normalizer 2.1.1 unknown library https://pypi.org/project/charset-normalizer/2.1.1 click 8.1.3 unknown library https://pypi.org/project/click/8.1.3 colorama 0.4.6 unknown library https://pypi.org/project/colorama/0.4.6 commonmark 0.9.1 unknown library https://pypi.org/project/commonmark/0.9.1 coverage 6.5.0 unknown library https://pypi.org/project/coverage/6.5.0 cyclonedx-bom 3.6.3 unknown library https://pypi.org/project/cyclonedx-bom/3.6.3 cyclonedx-python-lib 3.1.0 unknown library https://pypi.org/project/cyclonedx-python-lib/3.1.0 deprecated 1.2.13 unknown library https://pypi.org/project/deprecated/1.2.13 dill 0.3.6 unknown library https://pypi.org/project/dill/0.3.6 exceptiongroup 1.0.1 unknown library https://pypi.org/project/exceptiongroup/1.0.1 flake8 5.0.4 unknown library https://pypi.org/project/flake8/5.0.4 ghp-import 2.1.0 unknown library https://pypi.org/project/ghp-import/2.1.0 griffe 0.23.0 unknown library https://pypi.org/project/griffe/0.23.0 idna 3.4 unknown library https://pypi.org/project/idna/3.4 importlib-metadata 5.0.0 unknown library https://pypi.org/project/importlib-metadata/5.0.0 iniconfig 1.1.1 unknown library https://pypi.org/project/iniconfig/1.1.1 isort 5.10.1 unknown library https://pypi.org/project/isort/5.10.1 jinja2 2.11.3 unknown library https://pypi.org/project/jinja2/2.11.3 lazy-object-proxy 1.8.0 unknown library https://pypi.org/project/lazy-object-proxy/1.8.0 markdown 3.3.7 unknown library https://pypi.org/project/markdown/3.3.7 markupsafe 2.0.1 unknown library https://pypi.org/project/markupsafe/2.0.1 mccabe 0.7.0 unknown library https://pypi.org/project/mccabe/0.7.0 mdbom 0.3.0 unknown library https://pypi.org/project/mdbom/0.3.0 mergedeep 1.3.4 unknown library https://pypi.org/project/mergedeep/1.3.4 mkdocs 1.4.2 unknown library https://pypi.org/project/mkdocs/1.4.2 mkdocs-autorefs 0.4.1 unknown library https://pypi.org/project/mkdocs-autorefs/0.4.1 mkdocs-coverage 0.2.5 unknown library https://pypi.org/project/mkdocs-coverage/0.2.5 mkdocstrings 0.19.0 unknown library https://pypi.org/project/mkdocstrings/0.19.0 mkdocstrings-python 0.7.1 unknown library https://pypi.org/project/mkdocstrings-python/0.7.1 mypy-extensions 0.4.3 unknown library https://pypi.org/project/mypy-extensions/0.4.3 packageurl-python 0.10.4 unknown library https://pypi.org/project/packageurl-python/0.10.4 packaging 21.3 unknown library https://pypi.org/project/packaging/21.3 pathspec 0.10.1 unknown library https://pypi.org/project/pathspec/0.10.1 pip-requirements-parser 31.2.0 unknown library https://pypi.org/project/pip-requirements-parser/31.2.0 platformdirs 2.5.2 unknown library https://pypi.org/project/platformdirs/2.5.2 pluggy 1.0.0 unknown library https://pypi.org/project/pluggy/1.0.0 pycodestyle 2.9.1 unknown library https://pypi.org/project/pycodestyle/2.9.1 pycparser 2.21 unknown library https://pypi.org/project/pycparser/2.21 pyflakes 2.5.0 unknown library https://pypi.org/project/pyflakes/2.5.0 pygithub 1.57 unknown library https://pypi.org/project/pygithub/1.57 pygments 2.13.0 unknown library https://pypi.org/project/pygments/2.13.0 pyjwt 2.6.0 unknown library https://pypi.org/project/pyjwt/2.6.0 pylint 2.15.5 unknown library https://pypi.org/project/pylint/2.15.5 pymdown-extensions 9.7 unknown library https://pypi.org/project/pymdown-extensions/9.7 pynacl 1.5.0 unknown library https://pypi.org/project/pynacl/1.5.0 pyparsing 3.0.9 unknown library https://pypi.org/project/pyparsing/3.0.9 pytest 7.2.0 unknown library https://pypi.org/project/pytest/7.2.0 pytest-cov 4.0.0 unknown library https://pypi.org/project/pytest-cov/4.0.0 python-dateutil 2.8.2 unknown library https://pypi.org/project/python-dateutil/2.8.2 python-dotenv 0.21.0 unknown library https://pypi.org/project/python-dotenv/0.21.0 pyyaml 6.0 unknown library https://pypi.org/project/pyyaml/6.0 pyyaml-env-tag 0.1 unknown library https://pypi.org/project/pyyaml-env-tag/0.1 requests 2.28.1 unknown library https://pypi.org/project/requests/2.28.1 rich 12.6.0 unknown library https://pypi.org/project/rich/12.6.0 setuptools 65.5.1 unknown library https://pypi.org/project/setuptools/65.5.1 six 1.16.0 unknown library https://pypi.org/project/six/1.16.0 sortedcontainers 2.4.0 unknown library https://pypi.org/project/sortedcontainers/2.4.0 toml 0.10.2 unknown library https://pypi.org/project/toml/0.10.2 tomli 2.0.1 unknown library https://pypi.org/project/tomli/2.0.1 tomlkit 0.11.6 unknown library https://pypi.org/project/tomlkit/0.11.6 typer 0.6.1 unknown library https://pypi.org/project/typer/0.6.1 typing-extensions 4.4.0 unknown library https://pypi.org/project/typing-extensions/4.4.0 urllib3 1.26.12 unknown library https://pypi.org/project/urllib3/1.26.12 watchdog 2.1.9 unknown library https://pypi.org/project/watchdog/2.1.9 wrapt 1.14.1 unknown library https://pypi.org/project/wrapt/1.14.1 zipp 3.10.0 unknown library https://pypi.org/project/zipp/3.10.0","title":"Sbom"},{"location":"sbom/#3rd-party-licenses","text":"Name Version License(s) Type URL astroid 2.12.12 unknown library attrs 22.1.0 unknown library https://pypi.org/project/attrs/22.1.0 black 22.10.0 unknown library https://pypi.org/project/black/22.10.0 certifi 2022.9.24 unknown library https://pypi.org/project/certifi/2022.9.24 cffi 1.15.1 unknown library https://pypi.org/project/cffi/1.15.1 charset-normalizer 2.1.1 unknown library https://pypi.org/project/charset-normalizer/2.1.1 click 8.1.3 unknown library https://pypi.org/project/click/8.1.3 colorama 0.4.6 unknown library https://pypi.org/project/colorama/0.4.6 commonmark 0.9.1 unknown library https://pypi.org/project/commonmark/0.9.1 coverage 6.5.0 unknown library https://pypi.org/project/coverage/6.5.0 cyclonedx-bom 3.6.3 unknown library https://pypi.org/project/cyclonedx-bom/3.6.3 cyclonedx-python-lib 3.1.0 unknown library https://pypi.org/project/cyclonedx-python-lib/3.1.0 deprecated 1.2.13 unknown library https://pypi.org/project/deprecated/1.2.13 dill 0.3.6 unknown library https://pypi.org/project/dill/0.3.6 exceptiongroup 1.0.1 unknown library https://pypi.org/project/exceptiongroup/1.0.1 flake8 5.0.4 unknown library https://pypi.org/project/flake8/5.0.4 ghp-import 2.1.0 unknown library https://pypi.org/project/ghp-import/2.1.0 griffe 0.23.0 unknown library https://pypi.org/project/griffe/0.23.0 idna 3.4 unknown library https://pypi.org/project/idna/3.4 importlib-metadata 5.0.0 unknown library https://pypi.org/project/importlib-metadata/5.0.0 iniconfig 1.1.1 unknown library https://pypi.org/project/iniconfig/1.1.1 isort 5.10.1 unknown library https://pypi.org/project/isort/5.10.1 jinja2 2.11.3 unknown library https://pypi.org/project/jinja2/2.11.3 lazy-object-proxy 1.8.0 unknown library https://pypi.org/project/lazy-object-proxy/1.8.0 markdown 3.3.7 unknown library https://pypi.org/project/markdown/3.3.7 markupsafe 2.0.1 unknown library https://pypi.org/project/markupsafe/2.0.1 mccabe 0.7.0 unknown library https://pypi.org/project/mccabe/0.7.0 mdbom 0.3.0 unknown library https://pypi.org/project/mdbom/0.3.0 mergedeep 1.3.4 unknown library https://pypi.org/project/mergedeep/1.3.4 mkdocs 1.4.2 unknown library https://pypi.org/project/mkdocs/1.4.2 mkdocs-autorefs 0.4.1 unknown library https://pypi.org/project/mkdocs-autorefs/0.4.1 mkdocs-coverage 0.2.5 unknown library https://pypi.org/project/mkdocs-coverage/0.2.5 mkdocstrings 0.19.0 unknown library https://pypi.org/project/mkdocstrings/0.19.0 mkdocstrings-python 0.7.1 unknown library https://pypi.org/project/mkdocstrings-python/0.7.1 mypy-extensions 0.4.3 unknown library https://pypi.org/project/mypy-extensions/0.4.3 packageurl-python 0.10.4 unknown library https://pypi.org/project/packageurl-python/0.10.4 packaging 21.3 unknown library https://pypi.org/project/packaging/21.3 pathspec 0.10.1 unknown library https://pypi.org/project/pathspec/0.10.1 pip-requirements-parser 31.2.0 unknown library https://pypi.org/project/pip-requirements-parser/31.2.0 platformdirs 2.5.2 unknown library https://pypi.org/project/platformdirs/2.5.2 pluggy 1.0.0 unknown library https://pypi.org/project/pluggy/1.0.0 pycodestyle 2.9.1 unknown library https://pypi.org/project/pycodestyle/2.9.1 pycparser 2.21 unknown library https://pypi.org/project/pycparser/2.21 pyflakes 2.5.0 unknown library https://pypi.org/project/pyflakes/2.5.0 pygithub 1.57 unknown library https://pypi.org/project/pygithub/1.57 pygments 2.13.0 unknown library https://pypi.org/project/pygments/2.13.0 pyjwt 2.6.0 unknown library https://pypi.org/project/pyjwt/2.6.0 pylint 2.15.5 unknown library https://pypi.org/project/pylint/2.15.5 pymdown-extensions 9.7 unknown library https://pypi.org/project/pymdown-extensions/9.7 pynacl 1.5.0 unknown library https://pypi.org/project/pynacl/1.5.0 pyparsing 3.0.9 unknown library https://pypi.org/project/pyparsing/3.0.9 pytest 7.2.0 unknown library https://pypi.org/project/pytest/7.2.0 pytest-cov 4.0.0 unknown library https://pypi.org/project/pytest-cov/4.0.0 python-dateutil 2.8.2 unknown library https://pypi.org/project/python-dateutil/2.8.2 python-dotenv 0.21.0 unknown library https://pypi.org/project/python-dotenv/0.21.0 pyyaml 6.0 unknown library https://pypi.org/project/pyyaml/6.0 pyyaml-env-tag 0.1 unknown library https://pypi.org/project/pyyaml-env-tag/0.1 requests 2.28.1 unknown library https://pypi.org/project/requests/2.28.1 rich 12.6.0 unknown library https://pypi.org/project/rich/12.6.0 setuptools 65.5.1 unknown library https://pypi.org/project/setuptools/65.5.1 six 1.16.0 unknown library https://pypi.org/project/six/1.16.0 sortedcontainers 2.4.0 unknown library https://pypi.org/project/sortedcontainers/2.4.0 toml 0.10.2 unknown library https://pypi.org/project/toml/0.10.2 tomli 2.0.1 unknown library https://pypi.org/project/tomli/2.0.1 tomlkit 0.11.6 unknown library https://pypi.org/project/tomlkit/0.11.6 typer 0.6.1 unknown library https://pypi.org/project/typer/0.6.1 typing-extensions 4.4.0 unknown library https://pypi.org/project/typing-extensions/4.4.0 urllib3 1.26.12 unknown library https://pypi.org/project/urllib3/1.26.12 watchdog 2.1.9 unknown library https://pypi.org/project/watchdog/2.1.9 wrapt 1.14.1 unknown library https://pypi.org/project/wrapt/1.14.1 zipp 3.10.0 unknown library https://pypi.org/project/zipp/3.10.0","title":"3rd Party Licenses"},{"location":"source_code/","text":"Source Code countstars ( json_format = False ) Counts the stars of a specified user and gives a nice comment to the user Optional[bool] = False decides wether json or plain text format is required int number of stars Source code in professional_python_exercises_2_githubcli\\github_cli.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @app . command () def countstars ( json_format : Optional [ bool ] = False ) -> int : \"\"\" Counts the stars of a specified user and gives a nice comment to the user Parameters: json_format : Optional[bool] = False decides wether json or plain text format is required Returns: starCount : int number of stars \"\"\" typer . echo ( \"Enter user to count stars for.\" ) user = get_user_form_input () name = user . name repositories = user . get_repos () star_count = 0 for repo in repositories : stars = repo . stargazers_count star_count += stars if json_format : output = {} output [ \"username\" ] = name output [ \"stars\" ] = star_count print ( json . dumps ( output )) else : typer . echo ( f \"User: { name } has { star_count } \u2b50 in { repositories . totalCount } repositories.\" ) typer . echo ( _rate_stars_to_repos ( star_count , repositories . totalCount )) return star_count get_github_token () Checks, if API Key is set as an environment variable. If not, the user is asked to input it in the console. Length checks enabled for the API key. If key has non-valid length (!=32) the user is asked again to enter a valid key. The key is saved into a local .env file. str API Key for the Open Weather Map Source code in professional_python_exercises_2_githubcli\\github_cli.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 def get_github_token () -> str : \"\"\" Checks, if API Key is set as an environment variable. If not, the user is asked to input it in the console. Length checks enabled for the API key. If key has non-valid length (!=32) the user is asked again to enter a valid key. The key is saved into a local .env file. Returns: github_token : str API Key for the Open Weather Map \"\"\" dotenv_file = dotenv . find_dotenv () if dotenv_file == \"\" : with open ( os . getcwd () + \" \\\\ .env\" , mode = \"w\" , encoding = \"utf-8\" ) . close (): pass dotenv_file = dotenv . find_dotenv () dotenv . load_dotenv ( dotenv_file ) if \"TNT_EX2_GITHUB_TOKEN\" not in os . environ : print ( \"No API Key found in your environment variables. \\n Please look at \" \"https://github.com/settings/tokens for getting an API key and enter \" \"it in the following line:\" , file = sys . stderr , ) os . environ [ \"TNT_EX2_GITHUB_TOKEN\" ] = input ( \"Please enter your API Key now: \\n -->\" ) . strip () api_key = os . environ [ \"TNT_EX2_GITHUB_TOKEN\" ] if len ( api_key ) != 40 : print ( \"Wrong sized GitHub Accoss Token inputted (correct length: 40), \" f \"key found: { api_key } , \\n please look at https://github.com/settings/tokens \" \"for getting an API key and enter it in the following line:\" , file = sys . stderr , ) os . environ [ \"TNT_EX2_GITHUB_TOKEN\" ] = input ( \"Please enter your API Key now: \\n -->\" ) . strip () return get_github_token () dotenv . set_key ( dotenv_file , \"TNT_EX2_GITHUB_TOKEN\" , api_key ) # save the API key to .env file return api_key get_user_form_input () Method used in the app commands to get the user from user input: user : NamedUser Source code in professional_python_exercises_2_githubcli\\github_cli.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def get_user_form_input () -> NamedUser : \"\"\" Method used in the app commands to get the user from user input: Returns: user : NamedUser \"\"\" name = input ( \"User: \" ) if name == \"\" : typer . echo ( \"Empty Value inputted, try again\" ) sys . exit ( \"Failed to get user input\" ) token = get_github_token () github_session = Github ( token ) if github_session . search_users ( name ) . totalCount == 0 : typer . echo ( \"User not found, please try again.\" ) sys . exit ( \"Failed to find user.\" ) user = github_session . get_user ( name ) return user getdetails ( json_format = False ) Gets the details for a specified user. Optional[bool] = False Decides wether nomal text output or json is required json Raw details in json format fron the get details request Source code in professional_python_exercises_2_githubcli\\github_cli.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 @app . command () def getdetails ( json_format : Optional [ bool ] = False ) -> json : \"\"\" Gets the details for a specified user. Parameters: json_format: Optional[bool] = False Decides wether nomal text output or json is required Returns: raw : json Raw details in json format fron the get details request \"\"\" typer . echo ( \"Enter user to get details for.\" ) user = get_user_form_input () name = user . name typer . echo ( f \"Getting the detials for: { name } \" ) bio = user . bio repocount = user . get_repos () . totalCount star_count = 0 for repo in user . get_repos (): stars = repo . stargazers_count star_count += stars followers = user . get_followers () following = user . get_following () blog = user . blog company = user . company contributions = user . contributions created = user . created_at email = user . email organizations = user . get_orgs () avatar_url = user . avatar_url starred = user . get_starred () subs = user . get_subscriptions () watched = user . get_watched () location = user . location hireable = user . hireable raw = user . raw_data if json_format : print ( raw ) else : typer . echo ( f \"Details about user: { user } , created at { created } , bio: { bio } \" ) typer . echo ( f \"Stars: { star_count } , repos: { repocount } , followers: { followers . totalCount } \" f \", following: { following . totalCount } \" ) typer . echo ( f \"Contributions: { contributions } , orgs: { organizations . totalCount } ,\" f \" starred: { starred . totalCount } , subs: { subs . totalCount } ,\" f \" watched: { watched . totalCount } \" ) typer . echo ( f \"Get a visual impression at: { avatar_url } \" ) typer . echo ( f \"The blog: { blog } \" ) typer . echo ( f \"Mail: { email } , hireable: { hireable } , location: { location } , company: { company } \" ) return raw setstatus () Sets the status to something related to this repository: Drinking tea. bool success if successful status change could be accomplished Source code in professional_python_exercises_2_githubcli\\github_cli.py 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 @app . command () def setstatus () -> bool : \"\"\" Sets the status to something related to this repository: Drinking tea. Returns: success : bool success if successful status change could be accomplished \"\"\" mutation = \"\"\"mutation { changeUserStatus(input:{emoji:\":tea:\", message:\"Drinking tea\"}) { status{ emoji message } } } \"\"\" headers = { \"Authorization\" : f \"token { get_github_token () } \" } request = requests . post ( \"https://api.github.com/graphql\" , json = { \"query\" : mutation }, headers = headers , timeout = 30 ) if request . status_code == 200 : typer . echo ( \"Success\" ) return True typer . echo ( f \"Mutation failed to run by returning code of { request . status_code } . { mutation } \" ) return False","title":"Source Code"},{"location":"source_code/#source-code","text":"","title":"Source Code"},{"location":"source_code/#professional_python_exercises_2_githubcli.github_cli.countstars","text":"Counts the stars of a specified user and gives a nice comment to the user Optional[bool] = False decides wether json or plain text format is required int number of stars Source code in professional_python_exercises_2_githubcli\\github_cli.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @app . command () def countstars ( json_format : Optional [ bool ] = False ) -> int : \"\"\" Counts the stars of a specified user and gives a nice comment to the user Parameters: json_format : Optional[bool] = False decides wether json or plain text format is required Returns: starCount : int number of stars \"\"\" typer . echo ( \"Enter user to count stars for.\" ) user = get_user_form_input () name = user . name repositories = user . get_repos () star_count = 0 for repo in repositories : stars = repo . stargazers_count star_count += stars if json_format : output = {} output [ \"username\" ] = name output [ \"stars\" ] = star_count print ( json . dumps ( output )) else : typer . echo ( f \"User: { name } has { star_count } \u2b50 in { repositories . totalCount } repositories.\" ) typer . echo ( _rate_stars_to_repos ( star_count , repositories . totalCount )) return star_count","title":"countstars()"},{"location":"source_code/#professional_python_exercises_2_githubcli.github_cli.get_github_token","text":"Checks, if API Key is set as an environment variable. If not, the user is asked to input it in the console. Length checks enabled for the API key. If key has non-valid length (!=32) the user is asked again to enter a valid key. The key is saved into a local .env file. str API Key for the Open Weather Map Source code in professional_python_exercises_2_githubcli\\github_cli.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 def get_github_token () -> str : \"\"\" Checks, if API Key is set as an environment variable. If not, the user is asked to input it in the console. Length checks enabled for the API key. If key has non-valid length (!=32) the user is asked again to enter a valid key. The key is saved into a local .env file. Returns: github_token : str API Key for the Open Weather Map \"\"\" dotenv_file = dotenv . find_dotenv () if dotenv_file == \"\" : with open ( os . getcwd () + \" \\\\ .env\" , mode = \"w\" , encoding = \"utf-8\" ) . close (): pass dotenv_file = dotenv . find_dotenv () dotenv . load_dotenv ( dotenv_file ) if \"TNT_EX2_GITHUB_TOKEN\" not in os . environ : print ( \"No API Key found in your environment variables. \\n Please look at \" \"https://github.com/settings/tokens for getting an API key and enter \" \"it in the following line:\" , file = sys . stderr , ) os . environ [ \"TNT_EX2_GITHUB_TOKEN\" ] = input ( \"Please enter your API Key now: \\n -->\" ) . strip () api_key = os . environ [ \"TNT_EX2_GITHUB_TOKEN\" ] if len ( api_key ) != 40 : print ( \"Wrong sized GitHub Accoss Token inputted (correct length: 40), \" f \"key found: { api_key } , \\n please look at https://github.com/settings/tokens \" \"for getting an API key and enter it in the following line:\" , file = sys . stderr , ) os . environ [ \"TNT_EX2_GITHUB_TOKEN\" ] = input ( \"Please enter your API Key now: \\n -->\" ) . strip () return get_github_token () dotenv . set_key ( dotenv_file , \"TNT_EX2_GITHUB_TOKEN\" , api_key ) # save the API key to .env file return api_key","title":"get_github_token()"},{"location":"source_code/#professional_python_exercises_2_githubcli.github_cli.get_user_form_input","text":"Method used in the app commands to get the user from user input: user : NamedUser Source code in professional_python_exercises_2_githubcli\\github_cli.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def get_user_form_input () -> NamedUser : \"\"\" Method used in the app commands to get the user from user input: Returns: user : NamedUser \"\"\" name = input ( \"User: \" ) if name == \"\" : typer . echo ( \"Empty Value inputted, try again\" ) sys . exit ( \"Failed to get user input\" ) token = get_github_token () github_session = Github ( token ) if github_session . search_users ( name ) . totalCount == 0 : typer . echo ( \"User not found, please try again.\" ) sys . exit ( \"Failed to find user.\" ) user = github_session . get_user ( name ) return user","title":"get_user_form_input()"},{"location":"source_code/#professional_python_exercises_2_githubcli.github_cli.getdetails","text":"Gets the details for a specified user. Optional[bool] = False Decides wether nomal text output or json is required json Raw details in json format fron the get details request Source code in professional_python_exercises_2_githubcli\\github_cli.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 @app . command () def getdetails ( json_format : Optional [ bool ] = False ) -> json : \"\"\" Gets the details for a specified user. Parameters: json_format: Optional[bool] = False Decides wether nomal text output or json is required Returns: raw : json Raw details in json format fron the get details request \"\"\" typer . echo ( \"Enter user to get details for.\" ) user = get_user_form_input () name = user . name typer . echo ( f \"Getting the detials for: { name } \" ) bio = user . bio repocount = user . get_repos () . totalCount star_count = 0 for repo in user . get_repos (): stars = repo . stargazers_count star_count += stars followers = user . get_followers () following = user . get_following () blog = user . blog company = user . company contributions = user . contributions created = user . created_at email = user . email organizations = user . get_orgs () avatar_url = user . avatar_url starred = user . get_starred () subs = user . get_subscriptions () watched = user . get_watched () location = user . location hireable = user . hireable raw = user . raw_data if json_format : print ( raw ) else : typer . echo ( f \"Details about user: { user } , created at { created } , bio: { bio } \" ) typer . echo ( f \"Stars: { star_count } , repos: { repocount } , followers: { followers . totalCount } \" f \", following: { following . totalCount } \" ) typer . echo ( f \"Contributions: { contributions } , orgs: { organizations . totalCount } ,\" f \" starred: { starred . totalCount } , subs: { subs . totalCount } ,\" f \" watched: { watched . totalCount } \" ) typer . echo ( f \"Get a visual impression at: { avatar_url } \" ) typer . echo ( f \"The blog: { blog } \" ) typer . echo ( f \"Mail: { email } , hireable: { hireable } , location: { location } , company: { company } \" ) return raw","title":"getdetails()"},{"location":"source_code/#professional_python_exercises_2_githubcli.github_cli.setstatus","text":"Sets the status to something related to this repository: Drinking tea. bool success if successful status change could be accomplished Source code in professional_python_exercises_2_githubcli\\github_cli.py 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 @app . command () def setstatus () -> bool : \"\"\" Sets the status to something related to this repository: Drinking tea. Returns: success : bool success if successful status change could be accomplished \"\"\" mutation = \"\"\"mutation { changeUserStatus(input:{emoji:\":tea:\", message:\"Drinking tea\"}) { status{ emoji message } } } \"\"\" headers = { \"Authorization\" : f \"token { get_github_token () } \" } request = requests . post ( \"https://api.github.com/graphql\" , json = { \"query\" : mutation }, headers = headers , timeout = 30 ) if request . status_code == 200 : typer . echo ( \"Success\" ) return True typer . echo ( f \"Mutation failed to run by returning code of { request . status_code } . { mutation } \" ) return False","title":"setstatus()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } var coviframe = document.getElementById(\"coviframe\"); function resizeIframe() { coviframe.style.height = coviframe.contentWindow.document.documentElement.offsetHeight + 'px'; } coviframe.contentWindow.document.body.onclick = function() { coviframe.contentWindow.location.reload(); }","title":"Coverage report"}]}